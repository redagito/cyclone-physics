name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work
    # equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

#    - name: Get GCC-10
#      run:   |
#             sudo apt update
#             sudo apt install gcc-10 g++-10
#      shell: bash

    - name: Conan installation
      id: conan
      uses: turtlebrowser/get-conan@v1.0

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"

    - name: Create default Conan profile
      run: conan profile detect

#    - name: Conan configure remotes
#      run:  |
#            conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan
#            conan config set general.revisions_enabled=1

#    - name: Conan profile update
#      run:  |
#            conan profile update settings.compiler=gcc default
#            conan profile update settings.compiler.version=10 default
#            conan profile update settings.compiler.cppstd=20 default
#            conan profile update env.CC=[/usr/bin/gcc-10] default
#            conan profile update env.CXX=[/usr/bin/g++-10] default
#            conan profile update conf.tools.cmake.cmaketoolchain:generator=Ninja default
#            conan profile show default

    - name: Conan install dependencies
      run: conan install . --build=missing --settings=build_type=Debug -c tools.system.package_manager:mode=install

    - name: CMake configuration
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset conan-debug

    - name: Cmake build
      run: cmake --build build/Debug

    - name: Cmake test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}
